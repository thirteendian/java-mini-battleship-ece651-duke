package ece651.sp22.yy340.battleship;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class V1ShipFactoryTest {
  private void checkShip(Ship<Character> testShip, String expectedName, char expectedLetter,
      Coordinate... expectedLocs) {
    for (Coordinate coordinate_t : expectedLocs) {
      assertEquals(expectedLetter, testShip.getDisplayInfoAt(coordinate_t));
      assertEquals(true, testShip.occupiesCoordinates(coordinate_t));
    }
    assertEquals(expectedName, testShip.getName());
  }

  @Test
  public void test_v1shipfactory() {
    AbstractShipFactory<Character> f = new V1ShipFactory();

    Placement v1_2 = new Placement(new Coordinate(1, 2), 'v');

    Ship<Character> dstv = f.makeDestroyer(v1_2);
    checkShip(dstv, "Destroyer", 'd', new Coordinate(1, 2), new Coordinate(2, 2), new Coordinate(3, 2));

    Ship<Character> carv = f.makeCarrier(v1_2);
    checkShip(carv, "Carrier", 'c', new Coordinate(1, 2), new Coordinate(2, 2), new Coordinate(3, 2));

    Ship<Character> btsv = f.makeBattleship(v1_2);
    checkShip(btsv, "Battleship", 'b', new Coordinate(1, 2), new Coordinate(2, 2), new Coordinate(3, 2));
    Ship<Character> sbmv = f.makeSubmarine(v1_2);
    checkShip(sbmv, "Submarine", 's', new Coordinate(1, 2), new Coordinate(2, 2));
    /*
     * Placement h1_2 = new Placement(new Coordinate(1, 2), 'h');
     * 
     * Ship<Character> dsth = shipFactory.makeDestroyer(h1_2); Ship<Character> carh
     * = shipFactory.makeCarrier(h1_2); Ship<Character> btsh =
     * shipFactory.makeBattleship(h1_2); Ship<Character> sbmh =
     * shipFactory.makeSubmarine(h1_2);
     * 
     * checkShip(dsth, "Destroyer", 'd', new Coordinate(1, 2), new Coordinate(1, 3),
     * new Coordinate(1, 4)); checkShip(carh, "Carrier", 'c', new Coordinate(1, 2),
     * new Coordinate(1, 3), new Coordinate(1, 4), new Coordinate(1, 5), new
     * Coordinate(1, 6), new Coordinate(1, 7)); checkShip(btsh, "Battleship", 'b',
     * new Coordinate(1, 2), new Coordinate(1, 3), new Coordinate(1, 4), new
     * Coordinate(1, 5));
     * 
     * checkShip(sbmh, "Submarine", 's', new Coordinate(1, 2), new Coordinate(1,
     * 3));
     */
  }

}
